// Generated by gencpp from file see_n_tell/TaggedObjects.msg
// DO NOT EDIT!


#ifndef SEE_N_TELL_MESSAGE_TAGGEDOBJECTS_H
#define SEE_N_TELL_MESSAGE_TAGGEDOBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace see_n_tell
{
template <class ContainerAllocator>
struct TaggedObjects_
{
  typedef TaggedObjects_<ContainerAllocator> Type;

  TaggedObjects_()
    : row()
    , column()
    , depth()
    , width()
    , height()
    , tag()  {
    }
  TaggedObjects_(const ContainerAllocator& _alloc)
    : row(_alloc)
    , column(_alloc)
    , depth(_alloc)
    , width(_alloc)
    , height(_alloc)
    , tag(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _row_type;
  _row_type row;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _column_type;
  _column_type column;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _depth_type;
  _depth_type depth;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _width_type;
  _width_type width;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _height_type;
  _height_type height;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _tag_type;
  _tag_type tag;




  typedef boost::shared_ptr< ::see_n_tell::TaggedObjects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::see_n_tell::TaggedObjects_<ContainerAllocator> const> ConstPtr;

}; // struct TaggedObjects_

typedef ::see_n_tell::TaggedObjects_<std::allocator<void> > TaggedObjects;

typedef boost::shared_ptr< ::see_n_tell::TaggedObjects > TaggedObjectsPtr;
typedef boost::shared_ptr< ::see_n_tell::TaggedObjects const> TaggedObjectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::see_n_tell::TaggedObjects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::see_n_tell::TaggedObjects_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace see_n_tell

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'see_n_tell': ['/home/chibike/catkin_ws/src/see_n_tell/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::see_n_tell::TaggedObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::see_n_tell::TaggedObjects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::see_n_tell::TaggedObjects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::see_n_tell::TaggedObjects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::see_n_tell::TaggedObjects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::see_n_tell::TaggedObjects_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::see_n_tell::TaggedObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54bcb59402f83d7fc9ccfd758dee382b";
  }

  static const char* value(const ::see_n_tell::TaggedObjects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54bcb59402f83d7fULL;
  static const uint64_t static_value2 = 0xc9ccfd758dee382bULL;
};

template<class ContainerAllocator>
struct DataType< ::see_n_tell::TaggedObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "see_n_tell/TaggedObjects";
  }

  static const char* value(const ::see_n_tell::TaggedObjects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::see_n_tell::TaggedObjects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[]          row\n\
int32[]          column\n\
int32[]          depth\n\
int32[]          width\n\
int32[]          height\n\
string[]         tag\n\
";
  }

  static const char* value(const ::see_n_tell::TaggedObjects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::see_n_tell::TaggedObjects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.row);
      stream.next(m.column);
      stream.next(m.depth);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.tag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaggedObjects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::see_n_tell::TaggedObjects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::see_n_tell::TaggedObjects_<ContainerAllocator>& v)
  {
    s << indent << "row[]" << std::endl;
    for (size_t i = 0; i < v.row.size(); ++i)
    {
      s << indent << "  row[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.row[i]);
    }
    s << indent << "column[]" << std::endl;
    for (size_t i = 0; i < v.column.size(); ++i)
    {
      s << indent << "  column[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.column[i]);
    }
    s << indent << "depth[]" << std::endl;
    for (size_t i = 0; i < v.depth.size(); ++i)
    {
      s << indent << "  depth[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.depth[i]);
    }
    s << indent << "width[]" << std::endl;
    for (size_t i = 0; i < v.width.size(); ++i)
    {
      s << indent << "  width[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.width[i]);
    }
    s << indent << "height[]" << std::endl;
    for (size_t i = 0; i < v.height.size(); ++i)
    {
      s << indent << "  height[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.height[i]);
    }
    s << indent << "tag[]" << std::endl;
    for (size_t i = 0; i < v.tag.size(); ++i)
    {
      s << indent << "  tag[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEE_N_TELL_MESSAGE_TAGGEDOBJECTS_H
